# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']

MetricsFormat = Literal['json', 'prometheus']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Raza types

class RazaOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Raza create method"""
    animales: 'AnimalCreateManyNestedWithoutRelationsInput'


class RazaCreateInput(RazaOptionalCreateInput):
    """Required arguments to the Raza create method"""
    codRaza: _str
    descripcion: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RazaOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Raza create method, without relations"""


class RazaCreateWithoutRelationsInput(RazaOptionalCreateWithoutRelationsInput):
    """Required arguments to the Raza create method, without relations"""
    codRaza: _str
    descripcion: _str


class RazaCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RazaCreateWithoutRelationsInput'
    connect: 'RazaWhereUniqueInput'


class RazaCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RazaCreateWithoutRelationsInput', List['RazaCreateWithoutRelationsInput']]
    connect: Union['RazaWhereUniqueInput', List['RazaWhereUniqueInput']]


_RazaWhereUnique_codRaza_Input = TypedDict(
    '_RazaWhereUnique_codRaza_Input',
    {
        'codRaza': '_str',
    },
    total=True
)

RazaWhereUniqueInput = _RazaWhereUnique_codRaza_Input


class RazaUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    codRaza: _str
    descripcion: _str
    animales: 'AnimalUpdateManyWithoutRelationsInput'


class RazaUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    codRaza: _str
    descripcion: _str


class RazaUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RazaCreateWithoutRelationsInput']
    connect: List['RazaWhereUniqueInput']
    set: List['RazaWhereUniqueInput']
    disconnect: List['RazaWhereUniqueInput']
    delete: List['RazaWhereUniqueInput']

    # TODO
    # update: List['RazaUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RazaUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RazaScalarWhereInput']
    # upsert: List['RazaUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['RazaCreateOrConnectWithoutRelationsInput']


class RazaUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RazaCreateWithoutRelationsInput'
    connect: 'RazaWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RazaUpdateInput'
    # upsert: 'RazaUpsertWithoutRelationsInput'
    # connectOrCreate: 'RazaCreateOrConnectWithoutRelationsInput'


class RazaUpsertInput(TypedDict):
    create: 'RazaCreateInput'
    update: 'RazaUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Raza_codRaza_OrderByInput = TypedDict(
    '_Raza_codRaza_OrderByInput',
    {
        'codRaza': 'SortOrder',
    },
    total=True
)

_Raza_descripcion_OrderByInput = TypedDict(
    '_Raza_descripcion_OrderByInput',
    {
        'descripcion': 'SortOrder',
    },
    total=True
)

RazaOrderByInput = Union[
    '_Raza_codRaza_OrderByInput',
    '_Raza_descripcion_OrderByInput',
]



# recursive Raza types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RazaRelationFilter = TypedDict(
    'RazaRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RazaListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RazaInclude(TypedDict, total=False):
    """Raza relational arguments"""
    animales: Union[bool, 'FindManyAnimalArgsFromRaza']


    

class RazaIncludeFromRaza(TypedDict, total=False):
    """Relational arguments for Raza"""
    animales: Union[bool, 'FindManyAnimalArgsFromRazaRecursive1']


class RazaIncludeFromRazaRecursive1(TypedDict, total=False):
    """Relational arguments for Raza"""
    animales: Union[bool, 'FindManyAnimalArgsFromRazaRecursive2']


class RazaIncludeFromRazaRecursive2(TypedDict, total=False):
    """Relational arguments for Raza"""
    animales: Union[bool, 'FindManyAnimalArgsFromRazaRecursive3']


class RazaIncludeFromRazaRecursive3(TypedDict, total=False):
    """Relational arguments for Raza"""
    animales: Union[bool, 'FindManyAnimalArgsFromRazaRecursive4']


class RazaIncludeFromRazaRecursive4(TypedDict, total=False):
    """Relational arguments for Raza"""

    

class RazaArgsFromRaza(TypedDict, total=False):
    """Arguments for Raza"""
    include: 'RazaIncludeFromRazaRecursive1'


class RazaArgsFromRazaRecursive1(TypedDict, total=False):
    """Arguments for Raza"""
    include: 'RazaIncludeFromRazaRecursive2'


class RazaArgsFromRazaRecursive2(TypedDict, total=False):
    """Arguments for Raza"""
    include: 'RazaIncludeFromRazaRecursive3'


class RazaArgsFromRazaRecursive3(TypedDict, total=False):
    """Arguments for Raza"""
    include: 'RazaIncludeFromRazaRecursive4'


class RazaArgsFromRazaRecursive4(TypedDict, total=False):
    """Arguments for Raza"""
    
    

class FindManyRazaArgsFromRaza(TypedDict, total=False):
    """Arguments for Raza"""
    take: int
    skip: int
    order_by: Union['RazaOrderByInput', List['RazaOrderByInput']]
    where: 'RazaWhereInput'
    cursor: 'RazaWhereUniqueInput'
    distinct: List['RazaScalarFieldKeys']
    include: 'RazaIncludeFromRazaRecursive1'


class FindManyRazaArgsFromRazaRecursive1(TypedDict, total=False):
    """Arguments for Raza"""
    take: int
    skip: int
    order_by: Union['RazaOrderByInput', List['RazaOrderByInput']]
    where: 'RazaWhereInput'
    cursor: 'RazaWhereUniqueInput'
    distinct: List['RazaScalarFieldKeys']
    include: 'RazaIncludeFromRazaRecursive2'


class FindManyRazaArgsFromRazaRecursive2(TypedDict, total=False):
    """Arguments for Raza"""
    take: int
    skip: int
    order_by: Union['RazaOrderByInput', List['RazaOrderByInput']]
    where: 'RazaWhereInput'
    cursor: 'RazaWhereUniqueInput'
    distinct: List['RazaScalarFieldKeys']
    include: 'RazaIncludeFromRazaRecursive3'


class FindManyRazaArgsFromRazaRecursive3(TypedDict, total=False):
    """Arguments for Raza"""
    take: int
    skip: int
    order_by: Union['RazaOrderByInput', List['RazaOrderByInput']]
    where: 'RazaWhereInput'
    cursor: 'RazaWhereUniqueInput'
    distinct: List['RazaScalarFieldKeys']
    include: 'RazaIncludeFromRazaRecursive4'


class FindManyRazaArgsFromRazaRecursive4(TypedDict, total=False):
    """Arguments for Raza"""
    take: int
    skip: int
    order_by: Union['RazaOrderByInput', List['RazaOrderByInput']]
    where: 'RazaWhereInput'
    cursor: 'RazaWhereUniqueInput'
    distinct: List['RazaScalarFieldKeys']
    
    

class AnimalIncludeFromRaza(TypedDict, total=False):
    """Relational arguments for Raza"""
    raza: Union[bool, 'RazaArgsFromRazaRecursive1']


class AnimalIncludeFromRazaRecursive1(TypedDict, total=False):
    """Relational arguments for Raza"""
    raza: Union[bool, 'RazaArgsFromRazaRecursive2']


class AnimalIncludeFromRazaRecursive2(TypedDict, total=False):
    """Relational arguments for Raza"""
    raza: Union[bool, 'RazaArgsFromRazaRecursive3']


class AnimalIncludeFromRazaRecursive3(TypedDict, total=False):
    """Relational arguments for Raza"""
    raza: Union[bool, 'RazaArgsFromRazaRecursive4']


class AnimalIncludeFromRazaRecursive4(TypedDict, total=False):
    """Relational arguments for Raza"""

    

class AnimalArgsFromRaza(TypedDict, total=False):
    """Arguments for Raza"""
    include: 'AnimalIncludeFromAnimalRecursive1'


class AnimalArgsFromRazaRecursive1(TypedDict, total=False):
    """Arguments for Raza"""
    include: 'AnimalIncludeFromAnimalRecursive2'


class AnimalArgsFromRazaRecursive2(TypedDict, total=False):
    """Arguments for Raza"""
    include: 'AnimalIncludeFromAnimalRecursive3'


class AnimalArgsFromRazaRecursive3(TypedDict, total=False):
    """Arguments for Raza"""
    include: 'AnimalIncludeFromAnimalRecursive4'


class AnimalArgsFromRazaRecursive4(TypedDict, total=False):
    """Arguments for Raza"""
    
    

class FindManyAnimalArgsFromRaza(TypedDict, total=False):
    """Arguments for Raza"""
    take: int
    skip: int
    order_by: Union['AnimalOrderByInput', List['AnimalOrderByInput']]
    where: 'AnimalWhereInput'
    cursor: 'AnimalWhereUniqueInput'
    distinct: List['AnimalScalarFieldKeys']
    include: 'AnimalIncludeFromAnimalRecursive1'


class FindManyAnimalArgsFromRazaRecursive1(TypedDict, total=False):
    """Arguments for Raza"""
    take: int
    skip: int
    order_by: Union['AnimalOrderByInput', List['AnimalOrderByInput']]
    where: 'AnimalWhereInput'
    cursor: 'AnimalWhereUniqueInput'
    distinct: List['AnimalScalarFieldKeys']
    include: 'AnimalIncludeFromAnimalRecursive2'


class FindManyAnimalArgsFromRazaRecursive2(TypedDict, total=False):
    """Arguments for Raza"""
    take: int
    skip: int
    order_by: Union['AnimalOrderByInput', List['AnimalOrderByInput']]
    where: 'AnimalWhereInput'
    cursor: 'AnimalWhereUniqueInput'
    distinct: List['AnimalScalarFieldKeys']
    include: 'AnimalIncludeFromAnimalRecursive3'


class FindManyAnimalArgsFromRazaRecursive3(TypedDict, total=False):
    """Arguments for Raza"""
    take: int
    skip: int
    order_by: Union['AnimalOrderByInput', List['AnimalOrderByInput']]
    where: 'AnimalWhereInput'
    cursor: 'AnimalWhereUniqueInput'
    distinct: List['AnimalScalarFieldKeys']
    include: 'AnimalIncludeFromAnimalRecursive4'


class FindManyAnimalArgsFromRazaRecursive4(TypedDict, total=False):
    """Arguments for Raza"""
    take: int
    skip: int
    order_by: Union['AnimalOrderByInput', List['AnimalOrderByInput']]
    where: 'AnimalWhereInput'
    cursor: 'AnimalWhereUniqueInput'
    distinct: List['AnimalScalarFieldKeys']
    


FindManyRazaArgs = FindManyRazaArgsFromRaza
FindFirstRazaArgs = FindManyRazaArgsFromRaza


    

class RazaWhereInput(TypedDict, total=False):
    """Raza arguments for searching"""
    codRaza: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    animales: 'AnimalListRelationFilter'

    # should be noted that AND and NOT should be Union['RazaWhereInputRecursive1', List['RazaWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RazaWhereInputRecursive1']
    OR: List['RazaWhereInputRecursive1']
    NOT: List['RazaWhereInputRecursive1']


class RazaWhereInputRecursive1(TypedDict, total=False):
    """Raza arguments for searching"""
    codRaza: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    animales: 'AnimalListRelationFilter'

    # should be noted that AND and NOT should be Union['RazaWhereInputRecursive2', List['RazaWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RazaWhereInputRecursive2']
    OR: List['RazaWhereInputRecursive2']
    NOT: List['RazaWhereInputRecursive2']


class RazaWhereInputRecursive2(TypedDict, total=False):
    """Raza arguments for searching"""
    codRaza: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    animales: 'AnimalListRelationFilter'

    # should be noted that AND and NOT should be Union['RazaWhereInputRecursive3', List['RazaWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RazaWhereInputRecursive3']
    OR: List['RazaWhereInputRecursive3']
    NOT: List['RazaWhereInputRecursive3']


class RazaWhereInputRecursive3(TypedDict, total=False):
    """Raza arguments for searching"""
    codRaza: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    animales: 'AnimalListRelationFilter'

    # should be noted that AND and NOT should be Union['RazaWhereInputRecursive4', List['RazaWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RazaWhereInputRecursive4']
    OR: List['RazaWhereInputRecursive4']
    NOT: List['RazaWhereInputRecursive4']


class RazaWhereInputRecursive4(TypedDict, total=False):
    """Raza arguments for searching"""
    codRaza: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    animales: 'AnimalListRelationFilter'



# aggregate Raza types


    

class RazaScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Raza arguments for searching"""
    codRaza: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RazaScalarWhereWithAggregatesInputRecursive1']
    OR: List['RazaScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RazaScalarWhereWithAggregatesInputRecursive1']


class RazaScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Raza arguments for searching"""
    codRaza: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RazaScalarWhereWithAggregatesInputRecursive2']
    OR: List['RazaScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RazaScalarWhereWithAggregatesInputRecursive2']


class RazaScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Raza arguments for searching"""
    codRaza: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RazaScalarWhereWithAggregatesInputRecursive3']
    OR: List['RazaScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RazaScalarWhereWithAggregatesInputRecursive3']


class RazaScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Raza arguments for searching"""
    codRaza: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RazaScalarWhereWithAggregatesInputRecursive4']
    OR: List['RazaScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RazaScalarWhereWithAggregatesInputRecursive4']


class RazaScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Raza arguments for searching"""
    codRaza: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']



class RazaGroupByOutput(TypedDict, total=False):
    codRaza: _str
    descripcion: _str
    _sum: 'RazaSumAggregateOutput'
    _avg: 'RazaAvgAggregateOutput'
    _min: 'RazaMinAggregateOutput'
    _max: 'RazaMaxAggregateOutput'
    _count: 'RazaCountAggregateOutput'


class RazaAvgAggregateOutput(TypedDict, total=False):
    """Raza output for aggregating averages"""


class RazaSumAggregateOutput(TypedDict, total=False):
    """Raza output for aggregating sums"""


class RazaScalarAggregateOutput(TypedDict, total=False):
    """Raza output including scalar fields"""
    codRaza: _str
    descripcion: _str


RazaMinAggregateOutput = RazaScalarAggregateOutput
RazaMaxAggregateOutput = RazaScalarAggregateOutput


class RazaMaxAggregateInput(TypedDict, total=False):
    """Raza input for aggregating by max"""
    codRaza: bool
    descripcion: bool


class RazaMinAggregateInput(TypedDict, total=False):
    """Raza input for aggregating by min"""
    codRaza: bool
    descripcion: bool


class RazaNumberAggregateInput(TypedDict, total=False):
    """Raza input for aggregating numbers"""


RazaAvgAggregateInput = RazaNumberAggregateInput
RazaSumAggregateInput = RazaNumberAggregateInput


RazaCountAggregateInput = TypedDict(
    'RazaCountAggregateInput',
    {
        'codRaza': bool,
        'descripcion': bool,
        '_all': bool,
    },
    total=False,
)

RazaCountAggregateOutput = TypedDict(
    'RazaCountAggregateOutput',
    {
        'codRaza': int,
        'descripcion': int,
        '_all': int,
    },
    total=False,
)


RazaKeys = Literal[
    'codRaza',
    'descripcion',
    'animales',
]
RazaScalarFieldKeys = Literal[
    'codRaza',
    'descripcion',
]
RazaScalarFieldKeysT = TypeVar('RazaScalarFieldKeysT', bound=RazaScalarFieldKeys)

RazaRelationalFieldKeys = Literal[
        'animales',
    ]

# Animal types

class AnimalOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Animal create method"""
    codRaza: _str
    raza: 'RazaCreateNestedWithoutRelationsInput'


class AnimalCreateInput(AnimalOptionalCreateInput):
    """Required arguments to the Animal create method"""
    codAnimal: _str
    descripcion: _str
    sexo: _str
    edad: _int
    colorPelaje: _str
    colorOjos: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AnimalOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Animal create method, without relations"""
    codRaza: _str


class AnimalCreateWithoutRelationsInput(AnimalOptionalCreateWithoutRelationsInput):
    """Required arguments to the Animal create method, without relations"""
    codAnimal: _str
    descripcion: _str
    sexo: _str
    edad: _int
    colorPelaje: _str
    colorOjos: _str


class AnimalCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AnimalCreateWithoutRelationsInput'
    connect: 'AnimalWhereUniqueInput'


class AnimalCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AnimalCreateWithoutRelationsInput', List['AnimalCreateWithoutRelationsInput']]
    connect: Union['AnimalWhereUniqueInput', List['AnimalWhereUniqueInput']]


_AnimalWhereUnique_codAnimal_Input = TypedDict(
    '_AnimalWhereUnique_codAnimal_Input',
    {
        'codAnimal': '_str',
    },
    total=True
)

AnimalWhereUniqueInput = _AnimalWhereUnique_codAnimal_Input


class AnimalUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    codAnimal: _str
    descripcion: _str
    sexo: _str
    edad: Union[AtomicIntInput, _int]
    colorPelaje: _str
    colorOjos: _str
    raza: 'RazaUpdateOneWithoutRelationsInput'


class AnimalUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    codAnimal: _str
    descripcion: _str
    sexo: _str
    edad: Union[AtomicIntInput, _int]
    colorPelaje: _str
    colorOjos: _str


class AnimalUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AnimalCreateWithoutRelationsInput']
    connect: List['AnimalWhereUniqueInput']
    set: List['AnimalWhereUniqueInput']
    disconnect: List['AnimalWhereUniqueInput']
    delete: List['AnimalWhereUniqueInput']

    # TODO
    # update: List['AnimalUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AnimalUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AnimalScalarWhereInput']
    # upsert: List['AnimalUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['AnimalCreateOrConnectWithoutRelationsInput']


class AnimalUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AnimalCreateWithoutRelationsInput'
    connect: 'AnimalWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AnimalUpdateInput'
    # upsert: 'AnimalUpsertWithoutRelationsInput'
    # connectOrCreate: 'AnimalCreateOrConnectWithoutRelationsInput'


class AnimalUpsertInput(TypedDict):
    create: 'AnimalCreateInput'
    update: 'AnimalUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Animal_codAnimal_OrderByInput = TypedDict(
    '_Animal_codAnimal_OrderByInput',
    {
        'codAnimal': 'SortOrder',
    },
    total=True
)

_Animal_descripcion_OrderByInput = TypedDict(
    '_Animal_descripcion_OrderByInput',
    {
        'descripcion': 'SortOrder',
    },
    total=True
)

_Animal_sexo_OrderByInput = TypedDict(
    '_Animal_sexo_OrderByInput',
    {
        'sexo': 'SortOrder',
    },
    total=True
)

_Animal_edad_OrderByInput = TypedDict(
    '_Animal_edad_OrderByInput',
    {
        'edad': 'SortOrder',
    },
    total=True
)

_Animal_codRaza_OrderByInput = TypedDict(
    '_Animal_codRaza_OrderByInput',
    {
        'codRaza': 'SortOrder',
    },
    total=True
)

_Animal_colorPelaje_OrderByInput = TypedDict(
    '_Animal_colorPelaje_OrderByInput',
    {
        'colorPelaje': 'SortOrder',
    },
    total=True
)

_Animal_colorOjos_OrderByInput = TypedDict(
    '_Animal_colorOjos_OrderByInput',
    {
        'colorOjos': 'SortOrder',
    },
    total=True
)

AnimalOrderByInput = Union[
    '_Animal_codAnimal_OrderByInput',
    '_Animal_descripcion_OrderByInput',
    '_Animal_sexo_OrderByInput',
    '_Animal_edad_OrderByInput',
    '_Animal_codRaza_OrderByInput',
    '_Animal_colorPelaje_OrderByInput',
    '_Animal_colorOjos_OrderByInput',
]



# recursive Animal types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AnimalRelationFilter = TypedDict(
    'AnimalRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AnimalListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AnimalInclude(TypedDict, total=False):
    """Animal relational arguments"""
    raza: Union[bool, 'RazaArgsFromAnimal']


    

class RazaIncludeFromAnimal(TypedDict, total=False):
    """Relational arguments for Animal"""
    animales: Union[bool, 'FindManyAnimalArgsFromAnimalRecursive1']


class RazaIncludeFromAnimalRecursive1(TypedDict, total=False):
    """Relational arguments for Animal"""
    animales: Union[bool, 'FindManyAnimalArgsFromAnimalRecursive2']


class RazaIncludeFromAnimalRecursive2(TypedDict, total=False):
    """Relational arguments for Animal"""
    animales: Union[bool, 'FindManyAnimalArgsFromAnimalRecursive3']


class RazaIncludeFromAnimalRecursive3(TypedDict, total=False):
    """Relational arguments for Animal"""
    animales: Union[bool, 'FindManyAnimalArgsFromAnimalRecursive4']


class RazaIncludeFromAnimalRecursive4(TypedDict, total=False):
    """Relational arguments for Animal"""

    

class RazaArgsFromAnimal(TypedDict, total=False):
    """Arguments for Animal"""
    include: 'RazaIncludeFromRazaRecursive1'


class RazaArgsFromAnimalRecursive1(TypedDict, total=False):
    """Arguments for Animal"""
    include: 'RazaIncludeFromRazaRecursive2'


class RazaArgsFromAnimalRecursive2(TypedDict, total=False):
    """Arguments for Animal"""
    include: 'RazaIncludeFromRazaRecursive3'


class RazaArgsFromAnimalRecursive3(TypedDict, total=False):
    """Arguments for Animal"""
    include: 'RazaIncludeFromRazaRecursive4'


class RazaArgsFromAnimalRecursive4(TypedDict, total=False):
    """Arguments for Animal"""
    
    

class FindManyRazaArgsFromAnimal(TypedDict, total=False):
    """Arguments for Animal"""
    take: int
    skip: int
    order_by: Union['RazaOrderByInput', List['RazaOrderByInput']]
    where: 'RazaWhereInput'
    cursor: 'RazaWhereUniqueInput'
    distinct: List['RazaScalarFieldKeys']
    include: 'RazaIncludeFromRazaRecursive1'


class FindManyRazaArgsFromAnimalRecursive1(TypedDict, total=False):
    """Arguments for Animal"""
    take: int
    skip: int
    order_by: Union['RazaOrderByInput', List['RazaOrderByInput']]
    where: 'RazaWhereInput'
    cursor: 'RazaWhereUniqueInput'
    distinct: List['RazaScalarFieldKeys']
    include: 'RazaIncludeFromRazaRecursive2'


class FindManyRazaArgsFromAnimalRecursive2(TypedDict, total=False):
    """Arguments for Animal"""
    take: int
    skip: int
    order_by: Union['RazaOrderByInput', List['RazaOrderByInput']]
    where: 'RazaWhereInput'
    cursor: 'RazaWhereUniqueInput'
    distinct: List['RazaScalarFieldKeys']
    include: 'RazaIncludeFromRazaRecursive3'


class FindManyRazaArgsFromAnimalRecursive3(TypedDict, total=False):
    """Arguments for Animal"""
    take: int
    skip: int
    order_by: Union['RazaOrderByInput', List['RazaOrderByInput']]
    where: 'RazaWhereInput'
    cursor: 'RazaWhereUniqueInput'
    distinct: List['RazaScalarFieldKeys']
    include: 'RazaIncludeFromRazaRecursive4'


class FindManyRazaArgsFromAnimalRecursive4(TypedDict, total=False):
    """Arguments for Animal"""
    take: int
    skip: int
    order_by: Union['RazaOrderByInput', List['RazaOrderByInput']]
    where: 'RazaWhereInput'
    cursor: 'RazaWhereUniqueInput'
    distinct: List['RazaScalarFieldKeys']
    
    

class AnimalIncludeFromAnimal(TypedDict, total=False):
    """Relational arguments for Animal"""
    raza: Union[bool, 'RazaArgsFromAnimalRecursive1']


class AnimalIncludeFromAnimalRecursive1(TypedDict, total=False):
    """Relational arguments for Animal"""
    raza: Union[bool, 'RazaArgsFromAnimalRecursive2']


class AnimalIncludeFromAnimalRecursive2(TypedDict, total=False):
    """Relational arguments for Animal"""
    raza: Union[bool, 'RazaArgsFromAnimalRecursive3']


class AnimalIncludeFromAnimalRecursive3(TypedDict, total=False):
    """Relational arguments for Animal"""
    raza: Union[bool, 'RazaArgsFromAnimalRecursive4']


class AnimalIncludeFromAnimalRecursive4(TypedDict, total=False):
    """Relational arguments for Animal"""

    

class AnimalArgsFromAnimal(TypedDict, total=False):
    """Arguments for Animal"""
    include: 'AnimalIncludeFromAnimalRecursive1'


class AnimalArgsFromAnimalRecursive1(TypedDict, total=False):
    """Arguments for Animal"""
    include: 'AnimalIncludeFromAnimalRecursive2'


class AnimalArgsFromAnimalRecursive2(TypedDict, total=False):
    """Arguments for Animal"""
    include: 'AnimalIncludeFromAnimalRecursive3'


class AnimalArgsFromAnimalRecursive3(TypedDict, total=False):
    """Arguments for Animal"""
    include: 'AnimalIncludeFromAnimalRecursive4'


class AnimalArgsFromAnimalRecursive4(TypedDict, total=False):
    """Arguments for Animal"""
    
    

class FindManyAnimalArgsFromAnimal(TypedDict, total=False):
    """Arguments for Animal"""
    take: int
    skip: int
    order_by: Union['AnimalOrderByInput', List['AnimalOrderByInput']]
    where: 'AnimalWhereInput'
    cursor: 'AnimalWhereUniqueInput'
    distinct: List['AnimalScalarFieldKeys']
    include: 'AnimalIncludeFromAnimalRecursive1'


class FindManyAnimalArgsFromAnimalRecursive1(TypedDict, total=False):
    """Arguments for Animal"""
    take: int
    skip: int
    order_by: Union['AnimalOrderByInput', List['AnimalOrderByInput']]
    where: 'AnimalWhereInput'
    cursor: 'AnimalWhereUniqueInput'
    distinct: List['AnimalScalarFieldKeys']
    include: 'AnimalIncludeFromAnimalRecursive2'


class FindManyAnimalArgsFromAnimalRecursive2(TypedDict, total=False):
    """Arguments for Animal"""
    take: int
    skip: int
    order_by: Union['AnimalOrderByInput', List['AnimalOrderByInput']]
    where: 'AnimalWhereInput'
    cursor: 'AnimalWhereUniqueInput'
    distinct: List['AnimalScalarFieldKeys']
    include: 'AnimalIncludeFromAnimalRecursive3'


class FindManyAnimalArgsFromAnimalRecursive3(TypedDict, total=False):
    """Arguments for Animal"""
    take: int
    skip: int
    order_by: Union['AnimalOrderByInput', List['AnimalOrderByInput']]
    where: 'AnimalWhereInput'
    cursor: 'AnimalWhereUniqueInput'
    distinct: List['AnimalScalarFieldKeys']
    include: 'AnimalIncludeFromAnimalRecursive4'


class FindManyAnimalArgsFromAnimalRecursive4(TypedDict, total=False):
    """Arguments for Animal"""
    take: int
    skip: int
    order_by: Union['AnimalOrderByInput', List['AnimalOrderByInput']]
    where: 'AnimalWhereInput'
    cursor: 'AnimalWhereUniqueInput'
    distinct: List['AnimalScalarFieldKeys']
    


FindManyAnimalArgs = FindManyAnimalArgsFromAnimal
FindFirstAnimalArgs = FindManyAnimalArgsFromAnimal


    

class AnimalWhereInput(TypedDict, total=False):
    """Animal arguments for searching"""
    codAnimal: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    sexo: Union[_str, 'types.StringFilter']
    edad: Union[_int, 'types.IntFilter']
    codRaza: Union[_str, 'types.StringFilter']
    colorPelaje: Union[_str, 'types.StringFilter']
    colorOjos: Union[_str, 'types.StringFilter']
    raza: 'RazaRelationFilter'

    # should be noted that AND and NOT should be Union['AnimalWhereInputRecursive1', List['AnimalWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AnimalWhereInputRecursive1']
    OR: List['AnimalWhereInputRecursive1']
    NOT: List['AnimalWhereInputRecursive1']


class AnimalWhereInputRecursive1(TypedDict, total=False):
    """Animal arguments for searching"""
    codAnimal: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    sexo: Union[_str, 'types.StringFilter']
    edad: Union[_int, 'types.IntFilter']
    codRaza: Union[_str, 'types.StringFilter']
    colorPelaje: Union[_str, 'types.StringFilter']
    colorOjos: Union[_str, 'types.StringFilter']
    raza: 'RazaRelationFilter'

    # should be noted that AND and NOT should be Union['AnimalWhereInputRecursive2', List['AnimalWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AnimalWhereInputRecursive2']
    OR: List['AnimalWhereInputRecursive2']
    NOT: List['AnimalWhereInputRecursive2']


class AnimalWhereInputRecursive2(TypedDict, total=False):
    """Animal arguments for searching"""
    codAnimal: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    sexo: Union[_str, 'types.StringFilter']
    edad: Union[_int, 'types.IntFilter']
    codRaza: Union[_str, 'types.StringFilter']
    colorPelaje: Union[_str, 'types.StringFilter']
    colorOjos: Union[_str, 'types.StringFilter']
    raza: 'RazaRelationFilter'

    # should be noted that AND and NOT should be Union['AnimalWhereInputRecursive3', List['AnimalWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AnimalWhereInputRecursive3']
    OR: List['AnimalWhereInputRecursive3']
    NOT: List['AnimalWhereInputRecursive3']


class AnimalWhereInputRecursive3(TypedDict, total=False):
    """Animal arguments for searching"""
    codAnimal: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    sexo: Union[_str, 'types.StringFilter']
    edad: Union[_int, 'types.IntFilter']
    codRaza: Union[_str, 'types.StringFilter']
    colorPelaje: Union[_str, 'types.StringFilter']
    colorOjos: Union[_str, 'types.StringFilter']
    raza: 'RazaRelationFilter'

    # should be noted that AND and NOT should be Union['AnimalWhereInputRecursive4', List['AnimalWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AnimalWhereInputRecursive4']
    OR: List['AnimalWhereInputRecursive4']
    NOT: List['AnimalWhereInputRecursive4']


class AnimalWhereInputRecursive4(TypedDict, total=False):
    """Animal arguments for searching"""
    codAnimal: Union[_str, 'types.StringFilter']
    descripcion: Union[_str, 'types.StringFilter']
    sexo: Union[_str, 'types.StringFilter']
    edad: Union[_int, 'types.IntFilter']
    codRaza: Union[_str, 'types.StringFilter']
    colorPelaje: Union[_str, 'types.StringFilter']
    colorOjos: Union[_str, 'types.StringFilter']
    raza: 'RazaRelationFilter'



# aggregate Animal types


    

class AnimalScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Animal arguments for searching"""
    codAnimal: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']
    sexo: Union[_str, 'types.StringWithAggregatesFilter']
    edad: Union[_int, 'types.IntWithAggregatesFilter']
    codRaza: Union[_str, 'types.StringWithAggregatesFilter']
    colorPelaje: Union[_str, 'types.StringWithAggregatesFilter']
    colorOjos: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AnimalScalarWhereWithAggregatesInputRecursive1']
    OR: List['AnimalScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AnimalScalarWhereWithAggregatesInputRecursive1']


class AnimalScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Animal arguments for searching"""
    codAnimal: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']
    sexo: Union[_str, 'types.StringWithAggregatesFilter']
    edad: Union[_int, 'types.IntWithAggregatesFilter']
    codRaza: Union[_str, 'types.StringWithAggregatesFilter']
    colorPelaje: Union[_str, 'types.StringWithAggregatesFilter']
    colorOjos: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AnimalScalarWhereWithAggregatesInputRecursive2']
    OR: List['AnimalScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AnimalScalarWhereWithAggregatesInputRecursive2']


class AnimalScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Animal arguments for searching"""
    codAnimal: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']
    sexo: Union[_str, 'types.StringWithAggregatesFilter']
    edad: Union[_int, 'types.IntWithAggregatesFilter']
    codRaza: Union[_str, 'types.StringWithAggregatesFilter']
    colorPelaje: Union[_str, 'types.StringWithAggregatesFilter']
    colorOjos: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AnimalScalarWhereWithAggregatesInputRecursive3']
    OR: List['AnimalScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AnimalScalarWhereWithAggregatesInputRecursive3']


class AnimalScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Animal arguments for searching"""
    codAnimal: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']
    sexo: Union[_str, 'types.StringWithAggregatesFilter']
    edad: Union[_int, 'types.IntWithAggregatesFilter']
    codRaza: Union[_str, 'types.StringWithAggregatesFilter']
    colorPelaje: Union[_str, 'types.StringWithAggregatesFilter']
    colorOjos: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AnimalScalarWhereWithAggregatesInputRecursive4']
    OR: List['AnimalScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AnimalScalarWhereWithAggregatesInputRecursive4']


class AnimalScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Animal arguments for searching"""
    codAnimal: Union[_str, 'types.StringWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']
    sexo: Union[_str, 'types.StringWithAggregatesFilter']
    edad: Union[_int, 'types.IntWithAggregatesFilter']
    codRaza: Union[_str, 'types.StringWithAggregatesFilter']
    colorPelaje: Union[_str, 'types.StringWithAggregatesFilter']
    colorOjos: Union[_str, 'types.StringWithAggregatesFilter']



class AnimalGroupByOutput(TypedDict, total=False):
    codAnimal: _str
    descripcion: _str
    sexo: _str
    edad: _int
    codRaza: _str
    colorPelaje: _str
    colorOjos: _str
    _sum: 'AnimalSumAggregateOutput'
    _avg: 'AnimalAvgAggregateOutput'
    _min: 'AnimalMinAggregateOutput'
    _max: 'AnimalMaxAggregateOutput'
    _count: 'AnimalCountAggregateOutput'


class AnimalAvgAggregateOutput(TypedDict, total=False):
    """Animal output for aggregating averages"""
    edad: float


class AnimalSumAggregateOutput(TypedDict, total=False):
    """Animal output for aggregating sums"""
    edad: _int


class AnimalScalarAggregateOutput(TypedDict, total=False):
    """Animal output including scalar fields"""
    codAnimal: _str
    descripcion: _str
    sexo: _str
    edad: _int
    codRaza: _str
    colorPelaje: _str
    colorOjos: _str


AnimalMinAggregateOutput = AnimalScalarAggregateOutput
AnimalMaxAggregateOutput = AnimalScalarAggregateOutput


class AnimalMaxAggregateInput(TypedDict, total=False):
    """Animal input for aggregating by max"""
    codAnimal: bool
    descripcion: bool
    sexo: bool
    edad: bool
    codRaza: bool
    colorPelaje: bool
    colorOjos: bool


class AnimalMinAggregateInput(TypedDict, total=False):
    """Animal input for aggregating by min"""
    codAnimal: bool
    descripcion: bool
    sexo: bool
    edad: bool
    codRaza: bool
    colorPelaje: bool
    colorOjos: bool


class AnimalNumberAggregateInput(TypedDict, total=False):
    """Animal input for aggregating numbers"""
    edad: bool


AnimalAvgAggregateInput = AnimalNumberAggregateInput
AnimalSumAggregateInput = AnimalNumberAggregateInput


AnimalCountAggregateInput = TypedDict(
    'AnimalCountAggregateInput',
    {
        'codAnimal': bool,
        'descripcion': bool,
        'sexo': bool,
        'edad': bool,
        'codRaza': bool,
        'colorPelaje': bool,
        'colorOjos': bool,
        '_all': bool,
    },
    total=False,
)

AnimalCountAggregateOutput = TypedDict(
    'AnimalCountAggregateOutput',
    {
        'codAnimal': int,
        'descripcion': int,
        'sexo': int,
        'edad': int,
        'codRaza': int,
        'colorPelaje': int,
        'colorOjos': int,
        '_all': int,
    },
    total=False,
)


AnimalKeys = Literal[
    'codAnimal',
    'descripcion',
    'sexo',
    'edad',
    'codRaza',
    'colorPelaje',
    'colorOjos',
    'raza',
]
AnimalScalarFieldKeys = Literal[
    'codAnimal',
    'descripcion',
    'sexo',
    'edad',
    'codRaza',
    'colorPelaje',
    'colorOjos',
]
AnimalScalarFieldKeysT = TypeVar('AnimalScalarFieldKeysT', bound=AnimalScalarFieldKeys)

AnimalRelationalFieldKeys = Literal[
        'raza',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields