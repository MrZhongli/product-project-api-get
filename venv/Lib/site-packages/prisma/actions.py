# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse

if TYPE_CHECKING:
    from .client import Client
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class RazaActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Raza]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Raza.prisma().query_raw(
            'SELECT * FROM Raza WHERE codRaza = ?',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Raza
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Raza.prisma().query_first(
            'SELECT * FROM Raza WHERE descripcion = ?',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.RazaCreateInput,
        include: Optional[types.RazaInclude] = None
    ) -> _PrismaModelT:
        """Create a new Raza record.

        Parameters
        ----------
        data
            Raza record data
        include
            Specifies which relations should be loaded on the returned Raza model

        Returns
        -------
        prisma.models.Raza
            The created Raza record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Raza record from just the required fields
        raza = await Raza.prisma().create(
            data={
                # data to create a Raza record
                'codRaza': 'ggciceaie',
                'descripcion': 'bbehjachib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.RazaCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Raza records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Raza record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Raza.prisma().create_many(
            data=[
                {
                    # data to create a Raza record
                    'codRaza': 'cadfabfehe',
                    'descripcion': 'dgiiaaijj',
                },
                {
                    # data to create a Raza record
                    'codRaza': 'bfaiacjjfc',
                    'descripcion': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.RazaWhereUniqueInput,
        include: Optional[types.RazaInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Raza record.

        Parameters
        ----------
        where
            Raza filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Raza model

        Returns
        -------
        prisma.models.Raza
            The deleted Raza record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        raza = await Raza.prisma().delete(
            where={
                'codRaza': 'bagcfbhiig',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.RazaWhereUniqueInput,
        include: Optional[types.RazaInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Raza record.

        Parameters
        ----------
        where
            Raza filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Raza model

        Returns
        -------
        prisma.models.Raza
            The found Raza record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        raza = await Raza.prisma().find_unique(
            where={
                'codRaza': 'cghideieh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.RazaWhereUniqueInput,
        include: Optional[types.RazaInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Raza record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Raza filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Raza model

        Returns
        -------
        prisma.models.Raza
            The found Raza record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        raza = await Raza.prisma().find_unique_or_raise(
            where={
                'codRaza': 'biabhbdai',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RazaWhereInput] = None,
        cursor: Optional[types.RazaWhereUniqueInput] = None,
        include: Optional[types.RazaInclude] = None,
        order: Optional[Union[types.RazaOrderByInput, List[types.RazaOrderByInput]]] = None,
        distinct: Optional[List[types.RazaScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Raza records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Raza records returned
        skip
            Ignore the first N results
        where
            Raza filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Raza model
        order
            Order the returned Raza records by any field
        distinct
            Filter Raza records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Raza]
            The list of all Raza records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Raza records
        razas = await Raza.prisma().find_many(take=10)

        # find the first 5 Raza records ordered by the codRaza field
        razas = await Raza.prisma().find_many(
            take=5,
            order={
                'codRaza': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RazaWhereInput] = None,
        cursor: Optional[types.RazaWhereUniqueInput] = None,
        include: Optional[types.RazaInclude] = None,
        order: Optional[Union[types.RazaOrderByInput, List[types.RazaOrderByInput]]] = None,
        distinct: Optional[List[types.RazaScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Raza record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Raza filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Raza model
        order
            Order the returned Raza records by any field
        distinct
            Filter Raza records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Raza
            The first Raza record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Raza record ordered by the descripcion field
        raza = await Raza.prisma().find_first(
            skip=1,
            order={
                'descripcion': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RazaWhereInput] = None,
        cursor: Optional[types.RazaWhereUniqueInput] = None,
        include: Optional[types.RazaInclude] = None,
        order: Optional[Union[types.RazaOrderByInput, List[types.RazaOrderByInput]]] = None,
        distinct: Optional[List[types.RazaScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Raza record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Raza filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Raza model
        order
            Order the returned Raza records by any field
        distinct
            Filter Raza records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Raza
            The first Raza record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Raza record ordered by the codRaza field
        raza = await Raza.prisma().find_first_or_raise(
            skip=1,
            order={
                'codRaza': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.RazaUpdateInput,
        where: types.RazaWhereUniqueInput,
        include: Optional[types.RazaInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Raza record.

        Parameters
        ----------
        data
            Raza record data specifying what to update
        where
            Raza filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Raza model

        Returns
        -------
        prisma.models.Raza
            The updated Raza record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        raza = await Raza.prisma().update(
            where={
                'codRaza': 'idghgaicb',
            },
            data={
                # data to update the Raza record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.RazaWhereUniqueInput,
        data: types.RazaUpsertInput,
        include: Optional[types.RazaInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Raza filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Raza model

        Returns
        -------
        prisma.models.Raza
            The created or updated Raza record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        raza = await Raza.prisma().upsert(
            where={
                'codRaza': 'fjfddhigg',
            },
            data={
                'create': {
                    'codRaza': 'fjfddhigg',
                    'descripcion': 'eigcfgbif',
                },
                'update': {
                    'descripcion': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.RazaUpdateManyMutationInput,
        where: types.RazaWhereInput,
    ) -> int:
        """Update multiple Raza records

        Parameters
        ----------
        data
            Raza data to update the selected Raza records to
        where
            Filter to select the Raza records to update

        Returns
        -------
        int
            The total number of Raza records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Raza records
        total = await Raza.prisma().update_many(
            data={
                'descripcion': 'hjaecfifb'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RazaWhereInput] = None,
        cursor: Optional[types.RazaWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Raza records present in the database

        Parameters
        ----------
        select
            Select the Raza fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Raza filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RazaCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Raza.prisma().count()

        # results: prisma.types.RazaCountAggregateOutput
        results = await Raza.prisma().count(
            select={
                '_all': True,
                'codRaza': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.RazaCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RazaWhereInput] = None,
        cursor: Optional[types.RazaWhereUniqueInput] = None,
    ) -> types.RazaCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.RazaCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RazaWhereInput] = None,
        cursor: Optional[types.RazaWhereUniqueInput] = None,
    ) -> Union[int, types.RazaCountAggregateOutput]:
        """Count the number of Raza records present in the database

        Parameters
        ----------
        select
            Select the Raza fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Raza filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RazaCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Raza.prisma().count()

        # results: prisma.types.RazaCountAggregateOutput
        results = await Raza.prisma().count(
            select={
                '_all': True,
                'descripcion': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.RazaCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.RazaWhereInput] = None
    ) -> int:
        """Delete multiple Raza records.

        Parameters
        ----------
        where
            Optional Raza filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Raza records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Raza records
        total = await Raza.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.RazaScalarFieldKeys'],
        *,
        where: Optional['types.RazaWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.RazaAvgAggregateInput'] = None,
        sum: Optional['types.RazaSumAggregateInput'] = None,
        min: Optional['types.RazaMinAggregateInput'] = None,
        max: Optional['types.RazaMaxAggregateInput'] = None,
        having: Optional['types.RazaScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.RazaCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.RazaScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.RazaScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.RazaGroupByOutput']:
        """Group Raza records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Raza fields to group records by
        where
            Raza filter to select records
        take
            Limit the maximum number of Raza records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.RazaGroupByOutput]
            A list of dictionaries representing the Raza record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Raza records by codRaza values
        # and count how many records are in each group
        results = await Raza.prisma().group_by(
            ['codRaza'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class AnimalActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Animal]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Animal.prisma().query_raw(
            'SELECT * FROM Animal WHERE codAnimal = ?',
            'cbbbjbfcii',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Animal
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Animal.prisma().query_first(
            'SELECT * FROM Animal WHERE descripcion = ?',
            'bbejhfidcb',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.AnimalCreateInput,
        include: Optional[types.AnimalInclude] = None
    ) -> _PrismaModelT:
        """Create a new Animal record.

        Parameters
        ----------
        data
            Animal record data
        include
            Specifies which relations should be loaded on the returned Animal model

        Returns
        -------
        prisma.models.Animal
            The created Animal record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Animal record from just the required fields
        animal = await Animal.prisma().create(
            data={
                # data to create a Animal record
                'codAnimal': 'bgeecijdgg',
                'descripcion': 'bdiicjafbj',
                'sexo': 'bgehebiafc',
                'edad': 1675546029,
                'codRaza': 'bhghchehcc',
                'colorPelaje': 'dcgchcbbf',
                'colorOjos': 'bdedcabahc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.AnimalCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Animal records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Animal record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Animal.prisma().create_many(
            data=[
                {
                    # data to create a Animal record
                    'codAnimal': 'ghfhiafcb',
                    'descripcion': 'heejgedji',
                    'sexo': 'bjgjgibgbf',
                    'edad': 1116175964,
                    'codRaza': 'igbehcbab',
                    'colorPelaje': 'bdadaadhag',
                    'colorOjos': 'bgiggdidbf',
                },
                {
                    # data to create a Animal record
                    'codAnimal': 'caaaedabfc',
                    'descripcion': 'bigibebcib',
                    'sexo': 'bigaiehgcc',
                    'edad': 1448521415,
                    'codRaza': 'bgcigfahea',
                    'colorPelaje': 'bcejgaggif',
                    'colorOjos': 'idfjadbcc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.AnimalWhereUniqueInput,
        include: Optional[types.AnimalInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Animal record.

        Parameters
        ----------
        where
            Animal filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Animal model

        Returns
        -------
        prisma.models.Animal
            The deleted Animal record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        animal = await Animal.prisma().delete(
            where={
                'codAnimal': 'hgdhbjhhj',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.AnimalWhereUniqueInput,
        include: Optional[types.AnimalInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Animal record.

        Parameters
        ----------
        where
            Animal filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Animal model

        Returns
        -------
        prisma.models.Animal
            The found Animal record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        animal = await Animal.prisma().find_unique(
            where={
                'codAnimal': 'ecjjjfbae',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.AnimalWhereUniqueInput,
        include: Optional[types.AnimalInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Animal record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Animal filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Animal model

        Returns
        -------
        prisma.models.Animal
            The found Animal record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        animal = await Animal.prisma().find_unique_or_raise(
            where={
                'codAnimal': 'bhhfibbigf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AnimalWhereInput] = None,
        cursor: Optional[types.AnimalWhereUniqueInput] = None,
        include: Optional[types.AnimalInclude] = None,
        order: Optional[Union[types.AnimalOrderByInput, List[types.AnimalOrderByInput]]] = None,
        distinct: Optional[List[types.AnimalScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Animal records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Animal records returned
        skip
            Ignore the first N results
        where
            Animal filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Animal model
        order
            Order the returned Animal records by any field
        distinct
            Filter Animal records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Animal]
            The list of all Animal records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Animal records
        animals = await Animal.prisma().find_many(take=10)

        # find the first 5 Animal records ordered by the sexo field
        animals = await Animal.prisma().find_many(
            take=5,
            order={
                'sexo': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AnimalWhereInput] = None,
        cursor: Optional[types.AnimalWhereUniqueInput] = None,
        include: Optional[types.AnimalInclude] = None,
        order: Optional[Union[types.AnimalOrderByInput, List[types.AnimalOrderByInput]]] = None,
        distinct: Optional[List[types.AnimalScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Animal record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Animal filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Animal model
        order
            Order the returned Animal records by any field
        distinct
            Filter Animal records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Animal
            The first Animal record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Animal record ordered by the edad field
        animal = await Animal.prisma().find_first(
            skip=1,
            order={
                'edad': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AnimalWhereInput] = None,
        cursor: Optional[types.AnimalWhereUniqueInput] = None,
        include: Optional[types.AnimalInclude] = None,
        order: Optional[Union[types.AnimalOrderByInput, List[types.AnimalOrderByInput]]] = None,
        distinct: Optional[List[types.AnimalScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Animal record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Animal filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Animal model
        order
            Order the returned Animal records by any field
        distinct
            Filter Animal records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Animal
            The first Animal record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Animal record ordered by the codRaza field
        animal = await Animal.prisma().find_first_or_raise(
            skip=1,
            order={
                'codRaza': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.AnimalUpdateInput,
        where: types.AnimalWhereUniqueInput,
        include: Optional[types.AnimalInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Animal record.

        Parameters
        ----------
        data
            Animal record data specifying what to update
        where
            Animal filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Animal model

        Returns
        -------
        prisma.models.Animal
            The updated Animal record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        animal = await Animal.prisma().update(
            where={
                'codAnimal': 'ijdbeffgg',
            },
            data={
                # data to update the Animal record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.AnimalWhereUniqueInput,
        data: types.AnimalUpsertInput,
        include: Optional[types.AnimalInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Animal filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Animal model

        Returns
        -------
        prisma.models.Animal
            The created or updated Animal record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        animal = await Animal.prisma().upsert(
            where={
                'codAnimal': 'jjfeafhfj',
            },
            data={
                'create': {
                    'codAnimal': 'jjfeafhfj',
                    'descripcion': 'bigibebcib',
                    'sexo': 'bigaiehgcc',
                    'edad': 1448521415,
                    'codRaza': 'bgcigfahea',
                    'colorPelaje': 'bcejgaggif',
                    'colorOjos': 'idfjadbcc',
                },
                'update': {
                    'descripcion': 'bigibebcib',
                    'sexo': 'bigaiehgcc',
                    'edad': 1448521415,
                    'codRaza': 'bgcigfahea',
                    'colorPelaje': 'bcejgaggif',
                    'colorOjos': 'idfjadbcc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.AnimalUpdateManyMutationInput,
        where: types.AnimalWhereInput,
    ) -> int:
        """Update multiple Animal records

        Parameters
        ----------
        data
            Animal data to update the selected Animal records to
        where
            Filter to select the Animal records to update

        Returns
        -------
        int
            The total number of Animal records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Animal records
        total = await Animal.prisma().update_many(
            data={
                'colorPelaje': 'cbachdgfce'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AnimalWhereInput] = None,
        cursor: Optional[types.AnimalWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Animal records present in the database

        Parameters
        ----------
        select
            Select the Animal fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Animal filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AnimalCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Animal.prisma().count()

        # results: prisma.types.AnimalCountAggregateOutput
        results = await Animal.prisma().count(
            select={
                '_all': True,
                'colorOjos': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.AnimalCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AnimalWhereInput] = None,
        cursor: Optional[types.AnimalWhereUniqueInput] = None,
    ) -> types.AnimalCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.AnimalCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AnimalWhereInput] = None,
        cursor: Optional[types.AnimalWhereUniqueInput] = None,
    ) -> Union[int, types.AnimalCountAggregateOutput]:
        """Count the number of Animal records present in the database

        Parameters
        ----------
        select
            Select the Animal fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Animal filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AnimalCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Animal.prisma().count()

        # results: prisma.types.AnimalCountAggregateOutput
        results = await Animal.prisma().count(
            select={
                '_all': True,
                'codAnimal': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.AnimalCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.AnimalWhereInput] = None
    ) -> int:
        """Delete multiple Animal records.

        Parameters
        ----------
        where
            Optional Animal filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Animal records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Animal records
        total = await Animal.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.AnimalScalarFieldKeys'],
        *,
        where: Optional['types.AnimalWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AnimalAvgAggregateInput'] = None,
        sum: Optional['types.AnimalSumAggregateInput'] = None,
        min: Optional['types.AnimalMinAggregateInput'] = None,
        max: Optional['types.AnimalMaxAggregateInput'] = None,
        having: Optional['types.AnimalScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.AnimalCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AnimalScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.AnimalScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.AnimalGroupByOutput']:
        """Group Animal records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Animal fields to group records by
        where
            Animal filter to select records
        take
            Limit the maximum number of Animal records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AnimalGroupByOutput]
            A list of dictionaries representing the Animal record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Animal records by descripcion values
        # and count how many records are in each group
        results = await Animal.prisma().group_by(
            ['descripcion'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models